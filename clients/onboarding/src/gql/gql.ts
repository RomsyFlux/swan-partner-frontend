/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
const documents = {
    "\n  query OnboardingInfo($id: ID!, $language: String!) {\n    onboardingInfo(id: $id) {\n      id\n      accountCountry\n      language\n      onboardingState\n      oAuthRedirectParameters {\n        redirectUrl\n      }\n      redirectUrl\n      projectInfo {\n        id\n        accentColor\n        name\n      }\n      ...OnboardingCompanyWizard_OnboardingInfo\n      ...OnboardingIndividualWizard_OnboardingInfo\n      info {\n        __typename\n        ... on OnboardingCompanyAccountHolderInfo {\n          ...OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo\n        }\n        ... on OnboardingIndividualAccountHolderInfo {\n          ...OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo\n        }\n      }\n    }\n  }\n": types.OnboardingInfoDocument,
    "\n  fragment OnboardingHeader_ProjectInfo on ProjectInfo {\n    id\n    name\n    logoUri\n  }\n": types.OnboardingHeader_ProjectInfoFragmentDoc,
    "\n  query SupportingDocumentCollection($supportingDocumentCollectionId: ID!) {\n    supportingDocumentCollection(id: $supportingDocumentCollectionId) {\n      id\n      accountHolder {\n        id\n        name\n      }\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      statusInfo {\n        status\n      }\n      supportingDocuments {\n        id\n        supportingDocumentPurpose\n        supportingDocumentType\n        updatedAt\n        statusInfo {\n          __typename\n          status\n          ... on SupportingDocumentUploadedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentValidatedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentRefusedStatusInfo {\n            reason\n            filename\n          }\n        }\n      }\n      projectInfo {\n        id\n        accentColor\n        ...OnboardingHeader_ProjectInfo\n      }\n    }\n  }\n": types.SupportingDocumentCollectionDocument,
    "\n  mutation RequestSupportingDocumentCollectionReview(\n    $input: RequestSupportingDocumentCollectionReviewInput!\n  ) {\n    requestSupportingDocumentCollectionReview(input: $input) {\n      __typename\n      ... on RequestSupportingDocumentCollectionReviewSuccessPayload {\n        supportingDocumentCollection {\n          id\n        }\n      }\n      ... on Rejection {\n        message\n      }\n    }\n  }\n": types.RequestSupportingDocumentCollectionReviewDocument,
    "\n  mutation DeleteSupportingDocument($input: DeleteSupportingDocumentInput!) {\n    deleteSupportingDocument(input: $input) {\n      __typename\n      ... on DeleteSupportingDocumentSuccessPayload {\n        id\n      }\n      ... on Rejection {\n        message\n      }\n    }\n  }\n": types.DeleteSupportingDocumentDocument,
    "\n  mutation GenerateSupportingDocumentUploadUrl($input: GenerateSupportingDocumentUploadUrlInput!) {\n    generateSupportingDocumentUploadUrl(input: $input) {\n      __typename\n      ... on GenerateSupportingDocumentUploadUrlSuccessPayload {\n        supportingDocumentId\n        upload {\n          fields {\n            key\n            value\n          }\n          url\n        }\n      }\n    }\n  }\n": types.GenerateSupportingDocumentUploadUrlDocument,
    "\n  mutation UpdateCompanyOnboarding(\n    $input: UnauthenticatedUpdateCompanyOnboardingInput!\n    $language: String!\n  ) {\n    unauthenticatedUpdateCompanyOnboarding(input: $input) {\n      __typename\n      ... on UnauthenticatedUpdateCompanyOnboardingSuccessPayload {\n        onboarding {\n          id\n          ...OnboardingCompanyWizard_OnboardingInfo\n          info {\n            __typename\n            ... on OnboardingCompanyAccountHolderInfo {\n              ...OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo\n            }\n          }\n        }\n      }\n      ... on ValidationRejection {\n        fields {\n          path\n          code\n          message\n        }\n      }\n    }\n  }\n": types.UpdateCompanyOnboardingDocument,
    "\n  mutation UpdateIndividualOnboarding(\n    $input: UnauthenticatedUpdateIndividualOnboardingInput!\n    $language: String!\n  ) {\n    unauthenticatedUpdateIndividualOnboarding(input: $input) {\n      __typename\n      ... on UnauthenticatedUpdateIndividualOnboardingSuccessPayload {\n        onboarding {\n          id\n          ...OnboardingIndividualWizard_OnboardingInfo\n          info {\n            __typename\n            ... on OnboardingIndividualAccountHolderInfo {\n              ...OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo\n            }\n          }\n        }\n      }\n      ... on ValidationRejection {\n        fields {\n          path\n          code\n          message\n        }\n      }\n    }\n  }\n": types.UpdateIndividualOnboardingDocument,
    "\n  fragment OnboardingCompanyBasicInfo_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    residencyAddress {\n      country\n    }\n    typeOfRepresentation\n    companyType\n  }\n": types.OnboardingCompanyBasicInfo_OnboardingCompanyAccountHolderInfoFragmentDoc,
    "\n  fragment OnboardingCompanyBasicInfo_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n": types.OnboardingCompanyBasicInfo_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingCompanyDocuments_OnboardingInfo on OnboardingInfo {\n    supportingDocumentCollection {\n      id\n      statusInfo {\n        status\n      }\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      supportingDocuments {\n        id\n        supportingDocumentPurpose\n        supportingDocumentType\n        updatedAt\n        statusInfo {\n          __typename\n          status\n          ... on SupportingDocumentUploadedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentValidatedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentRefusedStatusInfo {\n            reason\n            filename\n          }\n        }\n      }\n    }\n    language\n  }\n": types.OnboardingCompanyDocuments_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingCompanyOrganisation1_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n": types.OnboardingCompanyOrganisation1_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingCompanyOrganisation_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    companyType\n    isRegistered\n    name\n    registrationNumber\n    vatNumber\n    taxIdentificationNumber\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n": types.OnboardingCompanyOrganisation_OnboardingCompanyAccountHolderInfoFragmentDoc,
    "\n  query CompanyInfoBySiren($siren: String!) {\n    companyInfoBySiren(input: { headquarterCountry: \"FR\", siren: $siren }) {\n      __typename\n      ... on CompanyInfoBySirenSuccessPayload {\n        companyInfo {\n          siren\n          companyName\n          vatNumber\n          headquarters {\n            address\n            town\n            zipCode\n          }\n        }\n      }\n    }\n  }\n": types.CompanyInfoBySirenDocument,
    "\n  fragment OnboardingCompanyOrganisation2_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    businessActivity\n    businessActivityDescription\n    monthlyPaymentVolume\n  }\n": types.OnboardingCompanyOrganisation2_OnboardingCompanyAccountHolderInfoFragmentDoc,
    "\n  fragment OnboardingCompanyOwnership_IndividualUltimateBeneficialOwner on IndividualUltimateBeneficialOwner {\n    __typename\n    firstName\n    lastName\n    birthDate\n    birthCountryCode\n    birthCity\n    birthCityPostalCode\n    info {\n      __typename\n      type\n      ... on IndividualUltimateBeneficialOwnerTypeHasCapital {\n        indirect\n        direct\n        totalCapitalPercentage\n      }\n    }\n    taxIdentificationNumber\n    residencyAddress {\n      addressLine1\n      addressLine2\n      city\n      country\n      postalCode\n      state\n    }\n    identityDocumentDetails {\n      type\n      issueDate\n      issuingAuthority\n      expiryDate\n      number\n    }\n  }\n": types.OnboardingCompanyOwnership_IndividualUltimateBeneficialOwnerFragmentDoc,
    "\n  fragment OnboardingCompanyOwnership_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    name\n    individualUltimateBeneficialOwners {\n      ...OnboardingCompanyOwnership_IndividualUltimateBeneficialOwner\n    }\n    residencyAddress {\n      country\n    }\n  }\n": types.OnboardingCompanyOwnership_OnboardingCompanyAccountHolderInfoFragmentDoc,
    "\n  fragment OnboardingCompanyOwnership_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n": types.OnboardingCompanyOwnership_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingCompanyRegistration_OnboardingInfo on OnboardingInfo {\n    email\n    projectInfo {\n      id\n      name\n      tcuDocumentUri(language: $language)\n    }\n    accountCountry\n    tcuUrl\n  }\n": types.OnboardingCompanyRegistration_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingCompanyRegistration_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n": types.OnboardingCompanyRegistration_OnboardingCompanyAccountHolderInfoFragmentDoc,
    "\n  fragment OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    companyType\n    residencyAddress {\n      country\n    }\n    individualUltimateBeneficialOwners {\n      __typename\n    }\n    ...OnboardingCompanyBasicInfo_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyRegistration_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOrganisation_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOrganisation2_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOwnership_OnboardingCompanyAccountHolderInfo\n  }\n": types.OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfoFragmentDoc,
    "\n  fragment OnboardingCompanyWizard_OnboardingInfo on OnboardingInfo {\n    id\n    statusInfo {\n      __typename\n      ... on OnboardingInvalidStatusInfo {\n        __typename\n        errors {\n          field\n          errors\n        }\n      }\n      ... on OnboardingFinalizedStatusInfo {\n        __typename\n      }\n      ... on OnboardingValidStatusInfo {\n        __typename\n      }\n    }\n    projectInfo {\n      id\n      ...OnboardingHeader_ProjectInfo\n    }\n    supportingDocumentCollection {\n      id\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      statusInfo {\n        status\n      }\n    }\n    legalRepresentativeRecommendedIdentificationLevel\n    accountCountry\n    ...OnboardingCompanyBasicInfo_OnboardingInfo\n    ...OnboardingCompanyRegistration_OnboardingInfo\n    ...OnboardingCompanyOrganisation1_OnboardingInfo\n    ...OnboardingCompanyOwnership_OnboardingInfo\n    ...OnboardingCompanyDocuments_OnboardingInfo\n  }\n": types.OnboardingCompanyWizard_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingIndividualDetails_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n": types.OnboardingIndividualDetails_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingIndividualDetails_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    employmentStatus\n    monthlyIncome\n    taxIdentificationNumber\n    residencyAddress {\n      country\n    }\n  }\n": types.OnboardingIndividualDetails_OnboardingIndividualAccountHolderInfoFragmentDoc,
    "\n  fragment OnboardingIndividualEmail_OnboardingInfo on OnboardingInfo {\n    accountCountry\n    projectInfo {\n      id\n      name\n      tcuDocumentUri(language: $language)\n    }\n    email\n    tcuUrl\n  }\n": types.OnboardingIndividualEmail_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingIndividualLocation_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n": types.OnboardingIndividualLocation_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingIndividualLocation_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n": types.OnboardingIndividualLocation_OnboardingIndividualAccountHolderInfoFragmentDoc,
    "\n  fragment OnboardingIndividualWizard_OnboardingInfo on OnboardingInfo {\n    id\n    statusInfo {\n      __typename\n      ... on OnboardingInvalidStatusInfo {\n        __typename\n        errors {\n          field\n          errors\n        }\n      }\n      ... on OnboardingFinalizedStatusInfo {\n        __typename\n      }\n      ... on OnboardingValidStatusInfo {\n        __typename\n      }\n    }\n    projectInfo {\n      id\n      ...OnboardingHeader_ProjectInfo\n    }\n    legalRepresentativeRecommendedIdentificationLevel\n    ...OnboardingIndividualEmail_OnboardingInfo\n    ...OnboardingIndividualLocation_OnboardingInfo\n    ...OnboardingIndividualDetails_OnboardingInfo\n  }\n": types.OnboardingIndividualWizard_OnboardingInfoFragmentDoc,
    "\n  fragment OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    ...OnboardingIndividualLocation_OnboardingIndividualAccountHolderInfo\n    ...OnboardingIndividualDetails_OnboardingIndividualAccountHolderInfo\n  }\n": types.OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfoFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query OnboardingInfo($id: ID!, $language: String!) {\n    onboardingInfo(id: $id) {\n      id\n      accountCountry\n      language\n      onboardingState\n      oAuthRedirectParameters {\n        redirectUrl\n      }\n      redirectUrl\n      projectInfo {\n        id\n        accentColor\n        name\n      }\n      ...OnboardingCompanyWizard_OnboardingInfo\n      ...OnboardingIndividualWizard_OnboardingInfo\n      info {\n        __typename\n        ... on OnboardingCompanyAccountHolderInfo {\n          ...OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo\n        }\n        ... on OnboardingIndividualAccountHolderInfo {\n          ...OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OnboardingInfo($id: ID!, $language: String!) {\n    onboardingInfo(id: $id) {\n      id\n      accountCountry\n      language\n      onboardingState\n      oAuthRedirectParameters {\n        redirectUrl\n      }\n      redirectUrl\n      projectInfo {\n        id\n        accentColor\n        name\n      }\n      ...OnboardingCompanyWizard_OnboardingInfo\n      ...OnboardingIndividualWizard_OnboardingInfo\n      info {\n        __typename\n        ... on OnboardingCompanyAccountHolderInfo {\n          ...OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo\n        }\n        ... on OnboardingIndividualAccountHolderInfo {\n          ...OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingHeader_ProjectInfo on ProjectInfo {\n    id\n    name\n    logoUri\n  }\n"): (typeof documents)["\n  fragment OnboardingHeader_ProjectInfo on ProjectInfo {\n    id\n    name\n    logoUri\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SupportingDocumentCollection($supportingDocumentCollectionId: ID!) {\n    supportingDocumentCollection(id: $supportingDocumentCollectionId) {\n      id\n      accountHolder {\n        id\n        name\n      }\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      statusInfo {\n        status\n      }\n      supportingDocuments {\n        id\n        supportingDocumentPurpose\n        supportingDocumentType\n        updatedAt\n        statusInfo {\n          __typename\n          status\n          ... on SupportingDocumentUploadedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentValidatedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentRefusedStatusInfo {\n            reason\n            filename\n          }\n        }\n      }\n      projectInfo {\n        id\n        accentColor\n        ...OnboardingHeader_ProjectInfo\n      }\n    }\n  }\n"): (typeof documents)["\n  query SupportingDocumentCollection($supportingDocumentCollectionId: ID!) {\n    supportingDocumentCollection(id: $supportingDocumentCollectionId) {\n      id\n      accountHolder {\n        id\n        name\n      }\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      statusInfo {\n        status\n      }\n      supportingDocuments {\n        id\n        supportingDocumentPurpose\n        supportingDocumentType\n        updatedAt\n        statusInfo {\n          __typename\n          status\n          ... on SupportingDocumentUploadedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentValidatedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentRefusedStatusInfo {\n            reason\n            filename\n          }\n        }\n      }\n      projectInfo {\n        id\n        accentColor\n        ...OnboardingHeader_ProjectInfo\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RequestSupportingDocumentCollectionReview(\n    $input: RequestSupportingDocumentCollectionReviewInput!\n  ) {\n    requestSupportingDocumentCollectionReview(input: $input) {\n      __typename\n      ... on RequestSupportingDocumentCollectionReviewSuccessPayload {\n        supportingDocumentCollection {\n          id\n        }\n      }\n      ... on Rejection {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RequestSupportingDocumentCollectionReview(\n    $input: RequestSupportingDocumentCollectionReviewInput!\n  ) {\n    requestSupportingDocumentCollectionReview(input: $input) {\n      __typename\n      ... on RequestSupportingDocumentCollectionReviewSuccessPayload {\n        supportingDocumentCollection {\n          id\n        }\n      }\n      ... on Rejection {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteSupportingDocument($input: DeleteSupportingDocumentInput!) {\n    deleteSupportingDocument(input: $input) {\n      __typename\n      ... on DeleteSupportingDocumentSuccessPayload {\n        id\n      }\n      ... on Rejection {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteSupportingDocument($input: DeleteSupportingDocumentInput!) {\n    deleteSupportingDocument(input: $input) {\n      __typename\n      ... on DeleteSupportingDocumentSuccessPayload {\n        id\n      }\n      ... on Rejection {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateSupportingDocumentUploadUrl($input: GenerateSupportingDocumentUploadUrlInput!) {\n    generateSupportingDocumentUploadUrl(input: $input) {\n      __typename\n      ... on GenerateSupportingDocumentUploadUrlSuccessPayload {\n        supportingDocumentId\n        upload {\n          fields {\n            key\n            value\n          }\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GenerateSupportingDocumentUploadUrl($input: GenerateSupportingDocumentUploadUrlInput!) {\n    generateSupportingDocumentUploadUrl(input: $input) {\n      __typename\n      ... on GenerateSupportingDocumentUploadUrlSuccessPayload {\n        supportingDocumentId\n        upload {\n          fields {\n            key\n            value\n          }\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateCompanyOnboarding(\n    $input: UnauthenticatedUpdateCompanyOnboardingInput!\n    $language: String!\n  ) {\n    unauthenticatedUpdateCompanyOnboarding(input: $input) {\n      __typename\n      ... on UnauthenticatedUpdateCompanyOnboardingSuccessPayload {\n        onboarding {\n          id\n          ...OnboardingCompanyWizard_OnboardingInfo\n          info {\n            __typename\n            ... on OnboardingCompanyAccountHolderInfo {\n              ...OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo\n            }\n          }\n        }\n      }\n      ... on ValidationRejection {\n        fields {\n          path\n          code\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateCompanyOnboarding(\n    $input: UnauthenticatedUpdateCompanyOnboardingInput!\n    $language: String!\n  ) {\n    unauthenticatedUpdateCompanyOnboarding(input: $input) {\n      __typename\n      ... on UnauthenticatedUpdateCompanyOnboardingSuccessPayload {\n        onboarding {\n          id\n          ...OnboardingCompanyWizard_OnboardingInfo\n          info {\n            __typename\n            ... on OnboardingCompanyAccountHolderInfo {\n              ...OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo\n            }\n          }\n        }\n      }\n      ... on ValidationRejection {\n        fields {\n          path\n          code\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateIndividualOnboarding(\n    $input: UnauthenticatedUpdateIndividualOnboardingInput!\n    $language: String!\n  ) {\n    unauthenticatedUpdateIndividualOnboarding(input: $input) {\n      __typename\n      ... on UnauthenticatedUpdateIndividualOnboardingSuccessPayload {\n        onboarding {\n          id\n          ...OnboardingIndividualWizard_OnboardingInfo\n          info {\n            __typename\n            ... on OnboardingIndividualAccountHolderInfo {\n              ...OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo\n            }\n          }\n        }\n      }\n      ... on ValidationRejection {\n        fields {\n          path\n          code\n          message\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateIndividualOnboarding(\n    $input: UnauthenticatedUpdateIndividualOnboardingInput!\n    $language: String!\n  ) {\n    unauthenticatedUpdateIndividualOnboarding(input: $input) {\n      __typename\n      ... on UnauthenticatedUpdateIndividualOnboardingSuccessPayload {\n        onboarding {\n          id\n          ...OnboardingIndividualWizard_OnboardingInfo\n          info {\n            __typename\n            ... on OnboardingIndividualAccountHolderInfo {\n              ...OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo\n            }\n          }\n        }\n      }\n      ... on ValidationRejection {\n        fields {\n          path\n          code\n          message\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyBasicInfo_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    residencyAddress {\n      country\n    }\n    typeOfRepresentation\n    companyType\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyBasicInfo_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    residencyAddress {\n      country\n    }\n    typeOfRepresentation\n    companyType\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyBasicInfo_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyBasicInfo_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyDocuments_OnboardingInfo on OnboardingInfo {\n    supportingDocumentCollection {\n      id\n      statusInfo {\n        status\n      }\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      supportingDocuments {\n        id\n        supportingDocumentPurpose\n        supportingDocumentType\n        updatedAt\n        statusInfo {\n          __typename\n          status\n          ... on SupportingDocumentUploadedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentValidatedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentRefusedStatusInfo {\n            reason\n            filename\n          }\n        }\n      }\n    }\n    language\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyDocuments_OnboardingInfo on OnboardingInfo {\n    supportingDocumentCollection {\n      id\n      statusInfo {\n        status\n      }\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      supportingDocuments {\n        id\n        supportingDocumentPurpose\n        supportingDocumentType\n        updatedAt\n        statusInfo {\n          __typename\n          status\n          ... on SupportingDocumentUploadedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentValidatedStatusInfo {\n            filename\n          }\n          ... on SupportingDocumentRefusedStatusInfo {\n            reason\n            filename\n          }\n        }\n      }\n    }\n    language\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyOrganisation1_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyOrganisation1_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyOrganisation_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    companyType\n    isRegistered\n    name\n    registrationNumber\n    vatNumber\n    taxIdentificationNumber\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyOrganisation_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    companyType\n    isRegistered\n    name\n    registrationNumber\n    vatNumber\n    taxIdentificationNumber\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CompanyInfoBySiren($siren: String!) {\n    companyInfoBySiren(input: { headquarterCountry: \"FR\", siren: $siren }) {\n      __typename\n      ... on CompanyInfoBySirenSuccessPayload {\n        companyInfo {\n          siren\n          companyName\n          vatNumber\n          headquarters {\n            address\n            town\n            zipCode\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query CompanyInfoBySiren($siren: String!) {\n    companyInfoBySiren(input: { headquarterCountry: \"FR\", siren: $siren }) {\n      __typename\n      ... on CompanyInfoBySirenSuccessPayload {\n        companyInfo {\n          siren\n          companyName\n          vatNumber\n          headquarters {\n            address\n            town\n            zipCode\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyOrganisation2_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    businessActivity\n    businessActivityDescription\n    monthlyPaymentVolume\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyOrganisation2_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    businessActivity\n    businessActivityDescription\n    monthlyPaymentVolume\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyOwnership_IndividualUltimateBeneficialOwner on IndividualUltimateBeneficialOwner {\n    __typename\n    firstName\n    lastName\n    birthDate\n    birthCountryCode\n    birthCity\n    birthCityPostalCode\n    info {\n      __typename\n      type\n      ... on IndividualUltimateBeneficialOwnerTypeHasCapital {\n        indirect\n        direct\n        totalCapitalPercentage\n      }\n    }\n    taxIdentificationNumber\n    residencyAddress {\n      addressLine1\n      addressLine2\n      city\n      country\n      postalCode\n      state\n    }\n    identityDocumentDetails {\n      type\n      issueDate\n      issuingAuthority\n      expiryDate\n      number\n    }\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyOwnership_IndividualUltimateBeneficialOwner on IndividualUltimateBeneficialOwner {\n    __typename\n    firstName\n    lastName\n    birthDate\n    birthCountryCode\n    birthCity\n    birthCityPostalCode\n    info {\n      __typename\n      type\n      ... on IndividualUltimateBeneficialOwnerTypeHasCapital {\n        indirect\n        direct\n        totalCapitalPercentage\n      }\n    }\n    taxIdentificationNumber\n    residencyAddress {\n      addressLine1\n      addressLine2\n      city\n      country\n      postalCode\n      state\n    }\n    identityDocumentDetails {\n      type\n      issueDate\n      issuingAuthority\n      expiryDate\n      number\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyOwnership_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    name\n    individualUltimateBeneficialOwners {\n      ...OnboardingCompanyOwnership_IndividualUltimateBeneficialOwner\n    }\n    residencyAddress {\n      country\n    }\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyOwnership_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    name\n    individualUltimateBeneficialOwners {\n      ...OnboardingCompanyOwnership_IndividualUltimateBeneficialOwner\n    }\n    residencyAddress {\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyOwnership_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyOwnership_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyRegistration_OnboardingInfo on OnboardingInfo {\n    email\n    projectInfo {\n      id\n      name\n      tcuDocumentUri(language: $language)\n    }\n    accountCountry\n    tcuUrl\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyRegistration_OnboardingInfo on OnboardingInfo {\n    email\n    projectInfo {\n      id\n      name\n      tcuDocumentUri(language: $language)\n    }\n    accountCountry\n    tcuUrl\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyRegistration_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyRegistration_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    companyType\n    residencyAddress {\n      country\n    }\n    individualUltimateBeneficialOwners {\n      __typename\n    }\n    ...OnboardingCompanyBasicInfo_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyRegistration_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOrganisation_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOrganisation2_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOwnership_OnboardingCompanyAccountHolderInfo\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyWizard_OnboardingCompanyAccountHolderInfo on OnboardingCompanyAccountHolderInfo {\n    companyType\n    residencyAddress {\n      country\n    }\n    individualUltimateBeneficialOwners {\n      __typename\n    }\n    ...OnboardingCompanyBasicInfo_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyRegistration_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOrganisation_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOrganisation2_OnboardingCompanyAccountHolderInfo\n    ...OnboardingCompanyOwnership_OnboardingCompanyAccountHolderInfo\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingCompanyWizard_OnboardingInfo on OnboardingInfo {\n    id\n    statusInfo {\n      __typename\n      ... on OnboardingInvalidStatusInfo {\n        __typename\n        errors {\n          field\n          errors\n        }\n      }\n      ... on OnboardingFinalizedStatusInfo {\n        __typename\n      }\n      ... on OnboardingValidStatusInfo {\n        __typename\n      }\n    }\n    projectInfo {\n      id\n      ...OnboardingHeader_ProjectInfo\n    }\n    supportingDocumentCollection {\n      id\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      statusInfo {\n        status\n      }\n    }\n    legalRepresentativeRecommendedIdentificationLevel\n    accountCountry\n    ...OnboardingCompanyBasicInfo_OnboardingInfo\n    ...OnboardingCompanyRegistration_OnboardingInfo\n    ...OnboardingCompanyOrganisation1_OnboardingInfo\n    ...OnboardingCompanyOwnership_OnboardingInfo\n    ...OnboardingCompanyDocuments_OnboardingInfo\n  }\n"): (typeof documents)["\n  fragment OnboardingCompanyWizard_OnboardingInfo on OnboardingInfo {\n    id\n    statusInfo {\n      __typename\n      ... on OnboardingInvalidStatusInfo {\n        __typename\n        errors {\n          field\n          errors\n        }\n      }\n      ... on OnboardingFinalizedStatusInfo {\n        __typename\n      }\n      ... on OnboardingValidStatusInfo {\n        __typename\n      }\n    }\n    projectInfo {\n      id\n      ...OnboardingHeader_ProjectInfo\n    }\n    supportingDocumentCollection {\n      id\n      requiredSupportingDocumentPurposes {\n        name\n      }\n      statusInfo {\n        status\n      }\n    }\n    legalRepresentativeRecommendedIdentificationLevel\n    accountCountry\n    ...OnboardingCompanyBasicInfo_OnboardingInfo\n    ...OnboardingCompanyRegistration_OnboardingInfo\n    ...OnboardingCompanyOrganisation1_OnboardingInfo\n    ...OnboardingCompanyOwnership_OnboardingInfo\n    ...OnboardingCompanyDocuments_OnboardingInfo\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingIndividualDetails_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"): (typeof documents)["\n  fragment OnboardingIndividualDetails_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingIndividualDetails_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    employmentStatus\n    monthlyIncome\n    taxIdentificationNumber\n    residencyAddress {\n      country\n    }\n  }\n"): (typeof documents)["\n  fragment OnboardingIndividualDetails_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    employmentStatus\n    monthlyIncome\n    taxIdentificationNumber\n    residencyAddress {\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingIndividualEmail_OnboardingInfo on OnboardingInfo {\n    accountCountry\n    projectInfo {\n      id\n      name\n      tcuDocumentUri(language: $language)\n    }\n    email\n    tcuUrl\n  }\n"): (typeof documents)["\n  fragment OnboardingIndividualEmail_OnboardingInfo on OnboardingInfo {\n    accountCountry\n    projectInfo {\n      id\n      name\n      tcuDocumentUri(language: $language)\n    }\n    email\n    tcuUrl\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingIndividualLocation_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"): (typeof documents)["\n  fragment OnboardingIndividualLocation_OnboardingInfo on OnboardingInfo {\n    accountCountry\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingIndividualLocation_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n"): (typeof documents)["\n  fragment OnboardingIndividualLocation_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    residencyAddress {\n      addressLine1\n      city\n      postalCode\n      country\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingIndividualWizard_OnboardingInfo on OnboardingInfo {\n    id\n    statusInfo {\n      __typename\n      ... on OnboardingInvalidStatusInfo {\n        __typename\n        errors {\n          field\n          errors\n        }\n      }\n      ... on OnboardingFinalizedStatusInfo {\n        __typename\n      }\n      ... on OnboardingValidStatusInfo {\n        __typename\n      }\n    }\n    projectInfo {\n      id\n      ...OnboardingHeader_ProjectInfo\n    }\n    legalRepresentativeRecommendedIdentificationLevel\n    ...OnboardingIndividualEmail_OnboardingInfo\n    ...OnboardingIndividualLocation_OnboardingInfo\n    ...OnboardingIndividualDetails_OnboardingInfo\n  }\n"): (typeof documents)["\n  fragment OnboardingIndividualWizard_OnboardingInfo on OnboardingInfo {\n    id\n    statusInfo {\n      __typename\n      ... on OnboardingInvalidStatusInfo {\n        __typename\n        errors {\n          field\n          errors\n        }\n      }\n      ... on OnboardingFinalizedStatusInfo {\n        __typename\n      }\n      ... on OnboardingValidStatusInfo {\n        __typename\n      }\n    }\n    projectInfo {\n      id\n      ...OnboardingHeader_ProjectInfo\n    }\n    legalRepresentativeRecommendedIdentificationLevel\n    ...OnboardingIndividualEmail_OnboardingInfo\n    ...OnboardingIndividualLocation_OnboardingInfo\n    ...OnboardingIndividualDetails_OnboardingInfo\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    ...OnboardingIndividualLocation_OnboardingIndividualAccountHolderInfo\n    ...OnboardingIndividualDetails_OnboardingIndividualAccountHolderInfo\n  }\n"): (typeof documents)["\n  fragment OnboardingIndividualWizard_OnboardingIndividualAccountHolderInfo on OnboardingIndividualAccountHolderInfo {\n    ...OnboardingIndividualLocation_OnboardingIndividualAccountHolderInfo\n    ...OnboardingIndividualDetails_OnboardingIndividualAccountHolderInfo\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;